import re
import os
import subprocess
from pathlib import Path
from dotenv import load_dotenv
import psutil
import time
from datetime import datetime, timedelta

load_dotenv()


class Service:
    def __init__(self, bot):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
        self.bot = bot
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env
        self.screen_name = os.getenv("SCREEN_NAME")  # –ò–º—è screen —Å–µ—Å—Å–∏–∏
        self.server_dir = Path(os.getenv("SERVER_DIR"))  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–µ—Ä–≤–µ—Ä–∞
        self.scripts_dir = Path(os.getenv("SCRIPTS_DIR"))  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not self.screen_name:
            raise ValueError("SCREEN_NAME –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")
        if not self.server_dir.exists():
            raise ValueError(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–µ—Ä–≤–µ—Ä–∞ {self.server_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        if not self.scripts_dir.exists():
            raise ValueError(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ {self.scripts_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    def _run_screen_command(self, command):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –≤ screen —Å–µ—Å—Å–∏—é"""
        try:
            full_cmd = f'screen -S {self.screen_name} -p 0 -X stuff "{command}^M"'
            subprocess.run(full_cmd, shell=True, check=True, executable='/bin/bash')
            return True, "–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        except subprocess.CalledProcessError as e:
            return False, f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}"

    def _run_script(self, script_name):
        """–ó–∞–ø—É—Å–∫ bash-—Å–∫—Ä–∏–ø—Ç–∞"""
        script_path = self.scripts_dir / script_name
        if not script_path.exists():
            return False, f"–°–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        try:
            subprocess.run(["bash", str(script_path)], check=True)
            return True, f"–°–∫—Ä–∏–ø—Ç {script_name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        except subprocess.CalledProcessError as e:
            return False, f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ {script_name}: {e}"

    def start_server(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        return self._run_script("start.sh")

    def stop_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        return self._run_script("stop.sh")

    def restart_server(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        return self._run_script("restart.sh")

    def backup_world(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –º–∏—Ä–∞"""
        return self._run_script("backup.sh")

    def get_server_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            result = subprocess.run(
                ["screen", "-ls", self.screen_name],
                capture_output=True,
                text=True
            )
            if f"{self.screen_name}" in result.stdout:
                return "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç"
            return "–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"

    def get_world_size(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –º–∏—Ä–∞"""
        world_dir = self.server_dir / "world"
        if not world_dir.exists():
            return "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        total_size = 0
        for dirpath, _, filenames in os.walk(world_dir):
            for f in filenames:
                fp = os.path.join(dirpath, f)
                total_size += os.path.getsize(fp)
        return f"{total_size / 1024 / 1024:.2f} MB"

    def enable_logging(self):
        """–ó–∞–ø—É—Å–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ screen"""
        try:
            command = 'screen -dmS mineservtelebot_logs_py python3 /root/minecraft/mineservtelebot/server_menu/logs.py'
            subprocess.run(command, shell=True, check=True)
            return True, "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ screen-—Å–µ—Å—Å–∏–∏"
        except subprocess.CalledProcessError as e:
            return False, f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"

    def disable_logging(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ screen-—Å–µ—Å—Å–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            subprocess.run(["screen", "-S", "mineservtelebot_logs_py", "-XS", "quit"], check=True)
            return True, "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        except subprocess.CalledProcessError as e:
            return False, f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"

    def execute_command(self, command):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        return self._run_screen_command(command)

    def get_server_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: CPU, RAM, TPS"""
        stats = {"cpu": "‚ùå N/A", "ram": "‚ùå N/A", "tps": "‚ùå N/A"}
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ screen-—Å–µ—Å—Å–∏—è
            result = subprocess.run(["screen", "-ls"], capture_output=True, text=True)
            screen_sessions = [line.split()[0] for line in result.stdout.split("\n") if self.screen_name in line]
            if not screen_sessions:
                return {"error": "üî¥ Screen-—Å–µ—Å—Å–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"}
            # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å Minecraft
            server_running = False
            for proc in psutil.process_iter(attrs=['pid', 'name', 'cmdline', 'memory_info', 'cpu_percent']):
                proc_info = proc.as_dict(attrs=['pid', 'name', 'cmdline', 'memory_info', 'cpu_percent'])
                cmdline = ' '.join(proc_info.get('cmdline', []))
                if 'java' in proc_info.get('name', '').lower() and 'minecraft' in cmdline and '-jar' in cmdline:
                    server_running = True
                    stats.update({
                        "cpu": f"{proc_info.get('cpu_percent', 0)}%",
                        "ram": f"{proc_info.get('memory_info').rss / 1024 / 1024:.2f} MB"
                    })
                    break
            if not server_running:
                return {"error": "üî¥ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å Minecraft –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            # –ß–∏—Ç–∞–µ–º TPS –∏–∑ –ª–æ–≥–æ–≤
            log_file = self.server_dir / "logs/latest.log"
            if log_file.exists():
                try:
                    with open(log_file, 'r', encoding='utf-8') as f:
                        for line in reversed(list(f)[-100:]):  # –ß–∏—Ç–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                            if "Mean tick time:" in line:
                                try:
                                    tick_time = float(line.split("Mean tick time:")[1].split()[0])
                                    stats["tps"] = f"{min(20.0, 1000 / tick_time):.1f}"
                                except (IndexError, ValueError):
                                    pass
                                break
                except Exception as e:
                    stats["error"] = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}"
        except Exception as e:
            stats["error"] = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        return stats

    def get_uptime(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã Minecraft-—Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ screen –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ screen-—Å–µ—Å—Å–∏—è
            result = subprocess.run(["screen", "-ls"], capture_output=True, text=True)
            screen_sessions = [line.split()[0] for line in result.stdout.split("\n") if self.screen_name in line]
            if not screen_sessions:
                return "üî¥ Screen-—Å–µ—Å—Å–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"
            # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å Minecraft
            start_time = None
            for proc in psutil.process_iter(attrs=['pid', 'name', 'cmdline', 'create_time']):
                proc_info = proc.as_dict(attrs=['pid', 'name', 'cmdline', 'create_time'])
                cmdline = ' '.join(proc_info.get('cmdline', []))
                if 'java' in proc_info.get('name', '').lower() and 'minecraft' in cmdline and '-jar' in cmdline:
                    start_time = proc_info.get('create_time', time.time())
                    break
            if not start_time:
                return "üî¥ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å Minecraft –Ω–µ –Ω–∞–π–¥–µ–Ω"
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            uptime_seconds = time.time() - start_time
            uptime_hours = int(uptime_seconds // 3600)
            uptime_minutes = int((uptime_seconds % 3600) // 60)
            uptime_seconds = int(uptime_seconds % 60)
            return f"üü¢ –°–µ—Ä–≤–µ—Ä `{self.screen_name}` —Ä–∞–±–æ—Ç–∞–µ—Ç {uptime_hours} —á {uptime_minutes} –º–∏–Ω {uptime_seconds} —Å–µ–∫"
        except Exception as e:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã: {str(e)}"